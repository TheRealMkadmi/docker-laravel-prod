# Run in foreground for container environments
daemon off;

# Increase file descriptor limits for high concurrency
worker_rlimit_nofile 100000;
worker_processes auto;

error_log /dev/stderr warn;
pid       /var/run/nginx.pid;

events {
    use              epoll;
    multi_accept     on;
    worker_connections 2048;  # Increase based on available resources
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Define a log format and direct access logs to stdout
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /dev/stdout main;

    # Optimize file I/O
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 4096;

    # Increase client header and body buffer sizes to avoid bottlenecks
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    client_body_buffer_size 8k;

    # Open file caching to reduce disk I/O for static assets
    open_file_cache           max=10000 inactive=60s;
    open_file_cache_valid     120s;
    open_file_cache_min_uses  2;
    open_file_cache_errors    on;

    # Enable gzip compression (do not disable gzip) for better bandwidth usage
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Global proxy timeouts
    proxy_connect_timeout 5s;
    proxy_send_timeout    30s;
    proxy_read_timeout    30s;
    send_timeout          30s;

    server {
        listen 80 default_server;
        server_name _;
        root /var/www/html/public;
    
        # Enhanced logging with error details
        access_log /dev/stdout combined;
        error_log /dev/stderr error;

        # Serve static files efficiently with long expiry headers
        location ~* \.(jpg|jpeg|gif|png|ico|css|js|webp)$ {
            try_files $uri $uri/ =404;
            expires 30d;
            add_header Cache-Control "public";
        }

        # For all requests, proxy to Octane unless a static file exists
        location / {
            try_files $uri @octane;
        }

        # Reverse proxy for Laravel Octane with optimized proxy buffering
        location @octane {
            proxy_pass         http://127.0.0.1:8000;
            proxy_http_version 1.1;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;

            # Use proxy buffering to quickly offload responses from Octane
            proxy_buffering       on;
            proxy_buffers         16 16k;
            proxy_buffer_size     16k;
            proxy_busy_buffers_size 32k;
        }

        location = /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"healthy"}';
        }
    }
}
